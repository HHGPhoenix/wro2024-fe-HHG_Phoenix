# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pixy
else:
    import _pixy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class BlockArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _pixy.BlockArray_swiginit(self, _pixy.new_BlockArray(nelements))
    __swig_destroy__ = _pixy.delete_BlockArray

    def __getitem__(self, index):
        return _pixy.BlockArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pixy.BlockArray___setitem__(self, index, value)

    def cast(self):
        return _pixy.BlockArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _pixy.BlockArray_frompointer(t)

# Register BlockArray in _pixy:
_pixy.BlockArray_swigregister(BlockArray)

def BlockArray_frompointer(t):
    return _pixy.BlockArray_frompointer(t)

class VectorArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _pixy.VectorArray_swiginit(self, _pixy.new_VectorArray(nelements))
    __swig_destroy__ = _pixy.delete_VectorArray

    def __getitem__(self, index):
        return _pixy.VectorArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pixy.VectorArray___setitem__(self, index, value)

    def cast(self):
        return _pixy.VectorArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _pixy.VectorArray_frompointer(t)

# Register VectorArray in _pixy:
_pixy.VectorArray_swigregister(VectorArray)

def VectorArray_frompointer(t):
    return _pixy.VectorArray_frompointer(t)

class IntersectionArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _pixy.IntersectionArray_swiginit(self, _pixy.new_IntersectionArray(nelements))
    __swig_destroy__ = _pixy.delete_IntersectionArray

    def __getitem__(self, index):
        return _pixy.IntersectionArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pixy.IntersectionArray___setitem__(self, index, value)

    def cast(self):
        return _pixy.IntersectionArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _pixy.IntersectionArray_frompointer(t)

# Register IntersectionArray in _pixy:
_pixy.IntersectionArray_swigregister(IntersectionArray)

def IntersectionArray_frompointer(t):
    return _pixy.IntersectionArray_frompointer(t)

class BarcodeArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _pixy.BarcodeArray_swiginit(self, _pixy.new_BarcodeArray(nelements))
    __swig_destroy__ = _pixy.delete_BarcodeArray

    def __getitem__(self, index):
        return _pixy.BarcodeArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pixy.BarcodeArray___setitem__(self, index, value)

    def cast(self):
        return _pixy.BarcodeArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _pixy.BarcodeArray_frompointer(t)

# Register BarcodeArray in _pixy:
_pixy.BarcodeArray_swigregister(BarcodeArray)

def BarcodeArray_frompointer(t):
    return _pixy.BarcodeArray_frompointer(t)


def init():
    return _pixy.init()

def change_prog(program_name):
    return _pixy.change_prog(program_name)

def get_frame_width():
    return _pixy.get_frame_width()

def get_frame_height():
    return _pixy.get_frame_height()

def ccc_get_blocks(max_blocks, blocks):
    return _pixy.ccc_get_blocks(max_blocks, blocks)

def line_get_all_features():
    return _pixy.line_get_all_features()

def line_get_main_features():
    return _pixy.line_get_main_features()

def line_get_intersections(max_intersections, intersections):
    return _pixy.line_get_intersections(max_intersections, intersections)

def line_get_vectors(max_vectors, vectors):
    return _pixy.line_get_vectors(max_vectors, vectors)

def line_get_barcodes(max_barcodes, barcodes):
    return _pixy.line_get_barcodes(max_barcodes, barcodes)

def set_lamp(upper, lower):
    return _pixy.set_lamp(upper, lower)

def set_servos(S1_Position, S2_Position):
    return _pixy.set_servos(S1_Position, S2_Position)

def video_get_RGB(X, Y):
    return _pixy.video_get_RGB(X, Y)
class Block(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_signature = property(_pixy.Block_m_signature_get, _pixy.Block_m_signature_set)
    m_x = property(_pixy.Block_m_x_get, _pixy.Block_m_x_set)
    m_y = property(_pixy.Block_m_y_get, _pixy.Block_m_y_set)
    m_width = property(_pixy.Block_m_width_get, _pixy.Block_m_width_set)
    m_height = property(_pixy.Block_m_height_get, _pixy.Block_m_height_set)
    m_angle = property(_pixy.Block_m_angle_get, _pixy.Block_m_angle_set)
    m_index = property(_pixy.Block_m_index_get, _pixy.Block_m_index_set)
    m_age = property(_pixy.Block_m_age_get, _pixy.Block_m_age_set)

    def __init__(self):
        _pixy.Block_swiginit(self, _pixy.new_Block())
    __swig_destroy__ = _pixy.delete_Block

# Register Block in _pixy:
_pixy.Block_swigregister(Block)

class Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_x0 = property(_pixy.Vector_m_x0_get, _pixy.Vector_m_x0_set)
    m_y0 = property(_pixy.Vector_m_y0_get, _pixy.Vector_m_y0_set)
    m_x1 = property(_pixy.Vector_m_x1_get, _pixy.Vector_m_x1_set)
    m_y1 = property(_pixy.Vector_m_y1_get, _pixy.Vector_m_y1_set)
    m_index = property(_pixy.Vector_m_index_get, _pixy.Vector_m_index_set)
    m_flags = property(_pixy.Vector_m_flags_get, _pixy.Vector_m_flags_set)

    def __init__(self):
        _pixy.Vector_swiginit(self, _pixy.new_Vector())
    __swig_destroy__ = _pixy.delete_Vector

# Register Vector in _pixy:
_pixy.Vector_swigregister(Vector)

class IntersectionLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_index = property(_pixy.IntersectionLine_m_index_get, _pixy.IntersectionLine_m_index_set)
    m_reserved = property(_pixy.IntersectionLine_m_reserved_get, _pixy.IntersectionLine_m_reserved_set)
    m_angle = property(_pixy.IntersectionLine_m_angle_get, _pixy.IntersectionLine_m_angle_set)

    def __init__(self):
        _pixy.IntersectionLine_swiginit(self, _pixy.new_IntersectionLine())
    __swig_destroy__ = _pixy.delete_IntersectionLine

# Register IntersectionLine in _pixy:
_pixy.IntersectionLine_swigregister(IntersectionLine)

class Intersection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_x = property(_pixy.Intersection_m_x_get, _pixy.Intersection_m_x_set)
    m_y = property(_pixy.Intersection_m_y_get, _pixy.Intersection_m_y_set)
    m_n = property(_pixy.Intersection_m_n_get, _pixy.Intersection_m_n_set)
    m_reserved = property(_pixy.Intersection_m_reserved_get, _pixy.Intersection_m_reserved_set)
    m_intLines = property(_pixy.Intersection_m_intLines_get, _pixy.Intersection_m_intLines_set)

    def getLineIndex(self, i):
        return _pixy.Intersection_getLineIndex(self, i)

    def getLineAngle(self, i):
        return _pixy.Intersection_getLineAngle(self, i)

    def __init__(self):
        _pixy.Intersection_swiginit(self, _pixy.new_Intersection())
    __swig_destroy__ = _pixy.delete_Intersection

# Register Intersection in _pixy:
_pixy.Intersection_swigregister(Intersection)

class Barcode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_x = property(_pixy.Barcode_m_x_get, _pixy.Barcode_m_x_set)
    m_y = property(_pixy.Barcode_m_y_get, _pixy.Barcode_m_y_set)
    m_flags = property(_pixy.Barcode_m_flags_get, _pixy.Barcode_m_flags_set)
    m_code = property(_pixy.Barcode_m_code_get, _pixy.Barcode_m_code_set)

    def __init__(self):
        _pixy.Barcode_swiginit(self, _pixy.new_Barcode())
    __swig_destroy__ = _pixy.delete_Barcode

# Register Barcode in _pixy:
_pixy.Barcode_swigregister(Barcode)



